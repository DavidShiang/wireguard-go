# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Build and Release Windows Executable
on:
  push:
    branches: [ "master" ]
  #pull_request:
  #  branches: [ "master" ]
  #tags:
  #  - "v*"

jobs:
  build:
    name: Build on Windows
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '^1.20'

      - name: Build WireGuard-go
        run: go build -o wireguard-go.exe

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: wireguard-go-windows
          path: wireguard-go.exe
          retention-days: 7

  release:
    name: Create/Update Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: wireguard-go-windows

      - name: Get Release Tag
        id: get_release_tag
        run: |
          RELEASE_TAG="${GITHUB_REF#refs/tags/}"
          echo "::set-output name=release_tag::$RELEASE_TAG"

      - name: Create/Update Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_release_tag.outputs.release_tag }} # Use the extracted tag
          release_name: Release v${{ steps.get_release_tag.outputs.release_tag }}
          body: |
            Windows executable for WireGuard-go.

            ```
            # Add your release notes here
            ```
          files: wireguard-go.exe
        # This is CRUCIAL for updating an existing release
        if: github.event_name == 'release' && github.event.action == 'published' # Only run on "published" releases
